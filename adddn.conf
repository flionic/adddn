upstream adddn_app {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response and hash for check debug mode
  hash $host$test_mode;

  server unix:/var/run/adddn/adddn.sock fail_timeout=0; # for UNIX domain socket setups
  server 127.0.0.1:23044 fail_timeout=0; # for app debug version
}

server {
  server_name   domgen.ml test.domgen.ml;
  root          /var/www/adddn;

  if ($host = test.domgen.ml) {
    set $test_mode 1;
  }

  # write access and error logs to /var/log
  access_log    /var/log/adddn_access.log;
  error_log     /var/log/adddn_error.log;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
    proxy_pass                  http://adddn_app;
    proxy_redirect              off;
    proxy_buffering             off;
    proxy_set_header            Host                $http_host;
    #proxy_set_header           Host                $host;
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_set_header            X-Real-IP           $remote_addr;
    proxy_set_header            X-Forwarded-Proto   $scheme;
    proxy_set_header            X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header            X-Forwarded-Host    $server_name;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;
  }

  location /static {
    # handle static files directly, without forwarding to the application
    alias       /var/www/adddn/static;
    if ($host != test.domgen.ml) {
      expires 30d;
    }
  }

  listen 443 ssl;
  ssl_certificate /etc/letsencrypt/live/domgen.ml/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/domgen.ml/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

server {
  server_name domgen.ml test.domgen.ml;
  if ($host ~ domgen.ml) {
    return 301 https://$host$request_uri;
  }
  listen 80;
  return 404;
}
